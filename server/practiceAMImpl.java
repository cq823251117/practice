package oracle.apps.ak.practice.server;

import com.sun.java.util.collections.HashMap;

import oracle.apps.ak.cq.server.empVOImpl;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.jbo.domain.Number;
import oracle.jbo.RowSetIterator;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class practiceAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public practiceAMImpl() {
    }
    
    /**Container's getter for practiceVO1
     */
    public practiceVOImpl getpracticeVO1() {
        return (practiceVOImpl)findViewObject("practiceVO1");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("oracle.apps.ak.practice.server", /* package name */
      "practiceAMLocal" /* Configuration Name */);
    }
    
    public void initSearch(){
        System.out.println("am init");
        practiceVOImpl practiceVO=(practiceVOImpl)this.getpracticeVO1();
        practiceVO.executeQuery();
    }
    
    public void search(HashMap parameters){
        System.out.println("am search");
        String userid=(String)parameters.get("userid");
        String username=(String)parameters.get("username");
        String whereClause=" 1=1 ";
        if(userid != null && !"".equals(userid)){
            System.out.println("condition go");
            whereClause+=" AND user_id like  '"+userid+ "' ";
        }
        if(username != null && !"".equals(username)){
            System.out.println("condition go");
            whereClause+=" AND user_name like  '"+username+ "' ";
        }
        practiceVOImpl practiceVO=(practiceVOImpl)this.getpracticeVO1();
        practiceVO.executeQueryPara(whereClause);
    }
    public void CreateUser(){
        practiceVOImpl practiceVO=(practiceVOImpl)this.getpracticeVO1();
        System.out.println("initail go");
        if(!practiceVO.isPreparedForExecution()) {
            System.out.println("initail if go");
            practiceVO.executeQuery();
        }
        practiceVORowImpl row=(practiceVORowImpl)practiceVO.createRow();//执行完这里自动调用EO的create方法
        practiceVO.insertRow(row);
        row.setNewRowState(practiceVORowImpl.STATUS_INITIALIZED);
        System.out.println("initail2 if go");
    }
    public void apply()
    {
        this.getOADBTransaction().commit();//这两个方法作用现在来看应该是一样的
      //getTransaction().commit();
    } 
    public void save(){
        //this.getOADBTransaction().commit();
        getTransaction().commit();
    }
    public void rollback() {
        OADBTransaction txn=getOADBTransaction();
        if(txn.isDirty()) {
            txn.rollback();
        }
    }
    public void test(String userId){//这是个没用的方法，只是测试数据的总行数能否获取
        practiceVOImpl practiceVO=(practiceVOImpl)this.getpracticeVO1();
        int fetchedRowCount=practiceVO.getFetchedRowCount();
        System.out.println("the number of data="+fetchedRowCount);
    }
    public void deleteUser(String userId) {
        practiceVOImpl practiceVO=(practiceVOImpl)this.getpracticeVO1();
        int key=Integer.parseInt(userId);
        practiceVORowImpl row=null;
        
        int fetchedRowCount=practiceVO.getFetchedRowCount();
        RowSetIterator deleteIter=practiceVO.createRowSetIterator("deleteIter");
        if(fetchedRowCount>0) {
            deleteIter.setRangeStart(0);
            deleteIter.setRangeSize(fetchedRowCount);
            for(int i=0;i<fetchedRowCount;i++) {
                row=(practiceVORowImpl)deleteIter.getRowAtRangeIndex(i);
                Number primaryKey=row.getUserId();
                if(primaryKey.compareTo(key)==0) {
                    row.remove();
                    getTransaction().commit();
                    break;
                }
            }
        }
        deleteIter.closeRowSetIterator();
    }
}
